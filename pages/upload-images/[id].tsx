import React, { useEffect, useMemo, createRef, useState } from 'react';
import Head from 'next/head';
import Layout from '../../components/Layout';
import Navbar from '../../components/Navbar';
import { Box, Typography, Button } from '@mui/material';
import { useRouter } from 'next/router';
import Spinner from '../../components/Spinner';
import UploadImagesForm, {
  Word,
} from '../../components/Inputs/UploadImagesForm';
import axios from 'axios';

const UploadImages = () => {
  const router = useRouter();
  const [loading, setLoading] = useState<boolean>(true);
  const { id, words: wordsQuery, use_audio, num_images } = router.query;
  const num_imgs: number = num_images ? parseFloat(num_images as string) : 0;
  const words: Word[] = wordsQuery
    ? JSON.parse(wordsQuery as string).map((word) => ({
        text: word[0],
        isImage: word[1],
      }))
    : [];

  useEffect(() => {
    if (!loading && (!wordsQuery || !use_audio || !num_images)) {
      router.push('/404');
    }
    setLoading(false);
  }, [wordsQuery, use_audio, router, num_images]);
  const inputRefs = useMemo(
    () =>
      Array(num_imgs)
        .fill(0)
        .map((i) => createRef<HTMLInputElement>()),
    [num_imgs]
  );
  let scriptHtml = <Spinner />;
  if (words) {
    scriptHtml = <UploadImagesForm inputRefs={inputRefs} transcript={words} />;
  }

  const submitHandler = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const formData = new FormData();
    if (id) {
      formData.append('tmp_name', id as string);
    } else {
      //TODO: handle error
    }
    for (let i = 0; i < inputRefs.length; i++) {
      if (
        inputRefs[i].current &&
        inputRefs[i].current!.files &&
        inputRefs[i].current!.files!.length > 0
      ) {
        formData.append(i.toString(), inputRefs[i].current!.files![0]);
      } else {
        //TODO: handle error
      }
    }
    formData.append('use_audio', 'as');
    formData.append('usage_rights', '');
    const { data } = await axios.post(
      `${process.env.NEXT_PUBLIC_API_URL}/create-video`,
      formData,
      {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      }
    );
    router.push(`/show-video/${data}`);
  };
  return (
    <>
      <Head>
        <title>Upload Images</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <main>
        <Layout>
          <Box
            sx={{
              display: 'flex',
              flexDirection: 'column',
              width: '100%',
              alignItems: 'center',
            }}
          >
            <Typography variant="h1" gutterBottom>
              Upload{' '}
              <Box component="span" sx={{ color: 'primary.main' }}>
                Your Images
              </Box>
            </Typography>
            <Typography sx={{ fontWeight: 'bold' }}>
              Your script is shown below
            </Typography>
            <Typography>
              Click on the{' '}
              <Box component="span" sx={{ color: 'primary.main' }}>
                blue image descriptions
              </Box>{' '}
              to upload your image files (JPG/PNG/GIF).
            </Typography>
            <form
              onSubmit={submitHandler}
              css={{ margin: 0, padding: 0, width: '100%' }}
            >
              {scriptHtml}
              <Button type="submit" variant="contained">
                Create My Video
              </Button>
            </form>
          </Box>
        </Layout>
      </main>
    </>
  );
};

export default UploadImages;
